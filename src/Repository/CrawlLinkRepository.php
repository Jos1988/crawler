<<<<<<< HEAD
<?php

namespace App\Repository;

use App\Entity\CrawlLink;
use App\Entity\Website;
use Doctrine\ORM\EntityRepository;

/**
 * CrawlLinkRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CrawlLinkRepository extends EntityRepository
{
    /**
     * Get all url's from a websites CrawlLinks and return in an array.
     *
     * @param Website $website
     *
     * @return mixed
     */
    public function getAllUrls(Website $website)
    {
        $roughResults = $this->createQueryBuilder('l')
            ->select('l.link')
            ->where('l.website = :website')
            ->setParameter('website', $website)
            ->getQuery()
            ->getResult();

        $result = [];
        foreach ($roughResults as $roughResult) {
            $result[] = $roughResult['link'];
        }

        return $result;
    }

    /**
     * Get array of uncrawled crawl links.
     *
     * @param Website $website
     *
     * @return CrawlLink[]
     */
    public function getUnCrawledLinks(Website $website): array
    {
        return $this->createQueryBuilder('l')
            ->select()
            ->where('l.website = :website')
            ->setParameter('website', $website)
            ->andWhere('l.crawled = :crawled')
            ->setParameter('crawled', false)
            ->getQuery()
            ->getResult();
    }

    /**
     * Count uncrawled crawlLinks.
     *
     * @param Website $website
     *
     * @return int
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function countUnCrawledLinks(Website $website): int
    {
        return $this->createQueryBuilder('l')
            ->select('COUNT(l)')
            ->where('l.website = :website')
            ->setParameter('website', $website)
            ->andWhere('l.crawled = :crawled')
            ->setParameter('crawled', false)
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * Set website links as uncrawled.
     *
     * @param Website $website
     *
     * @return void
     */
    public function setLinksNotCrawled(Website $website): void
    {
        $this->createQueryBuilder('l')
            ->update()
            ->set('l.crawled', ':crawled')
            ->where('l.website = :website')
            ->setParameter('website', $website)
            ->setParameter('crawled', false)
            ->getQuery()
            ->execute();
    }

    /**
     * Get array links not crawled since datetime.
     *
     * @param Website   $website
     * @param \DateTime $datetime
     *
     * @return CrawlLink[]
     */
    public function getLinksNotCrawledSince(Website $website, \DateTime $datetime): array
    {
        return $this->createQueryBuilder('l')
            ->select()
            ->where('l.website = :website')
            ->setParameter('website', $website)
            ->andWhere('l.crawlDate =< :datetime')
            ->setParameter('datetime', $datetime)
            ->getQuery()
            ->getResult();
    }

    /**
     * Get array most proven crawl links.
     *
     * @param Website $website
     * @param int     $avgNewLinks
     *
     * @return CrawlLink[]
     */
    public function getEfficientUrls(Website $website, int $avgNewLinks)
    {
        return $this->createQueryBuilder('l')
            ->select()
            ->where('l.website = :website')
            ->setParameter('website', $website)
            ->andWhere('l.crawlSuccesses / l.crawlCount >= :avgNewLinks')
            ->setParameter('avgNewLinks', $avgNewLinks)
            ->getQuery()
            ->getResult();
    }
}
=======
<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;
use App\Entity\Website;
use App\Entity\CrawlLink;

/**
 * CrawlLinkRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CrawlLinkRepository extends EntityRepository
{
    /**
     * Get all url's from a websites CrawlLinks and return in an array.
     *
     * @param Website $website
     *
     * @return mixed
     */
    public function getAllUrls(Website $website)
    {
        $roughResults = $this->createQueryBuilder('l')
            ->select('l.link')
            ->where('l.website = :website')
            ->setParameter('website', $website)
            ->getQuery()
            ->getResult();

        $result = [];
        foreach ($roughResults as $roughResult) {
            $result[] = $roughResult['link'];
        }

        return $result;
    }

    /**
     * Get array of uncrawled crawl links.
     *
     * @param Website $website
     *
     * @return CrawlLink[]
     */
    public function getUnCrawledLinks(Website $website): array
    {
        return $this->createQueryBuilder('l')
            ->select()
            ->where('l.website = :website')
            ->setParameter('website', $website)
            ->andWhere('l.crawled = :crawled')
            ->setParameter('crawled', false)
            ->getQuery()
            ->getResult();
    }

    /**
     * Get array most proven crawl links.
     *
     * @param Website $website
     * @param int     $avgNewLinks
     *
     * @return CrawlLink[]
     */
    public function getEfficientUrls(Website $website, int $avgNewLinks)
    {
        return $this->createQueryBuilder('l')
            ->select()
            ->where('l.website = :website')
            ->setParameter('website', $website)
            ->andWhere('l.crawlSuccesses / l.crawlCount >= :avgNewLinks')
            ->setParameter('avgNewLinks', $avgNewLinks)
            ->getQuery()
            ->getResult();
    }
}
>>>>>>> parent of 00b8745... consolidate
